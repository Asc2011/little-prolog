{
  "version": 3,
  "file": "prologExample.js",
  "sourceRoot": "..",
  "sources": [
    "src/prologExample.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,IAAA,QAAA,EAAA,MAAA,EAAA,EAAA,EAAA,eAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA;;AAAA,CAAA,CAAE,QAAF,CAAA,GAAe,OAAA,CAAQ,eAAR,CAAf;;AACA,OAAA,CAAQ,uBAAR;;AACA,MAAA,GAAS;;AAGT,eAAA,GAAkB;;AAiDlB,gBAAA,GAAmB,QAAA,CAAE,GAAF,CAAA;EACjB,GAAA,GAAM,GAAG,CAAC,OAAJ,CAAY,eAAZ,EAA6B,EAA7B;EACN,GAAA,GAAM,GAAG,CAAC,OAAJ,CAAY,KAAZ,EAA6B,IAA7B;SACN,GAAG,CAAC,KAAJ,CAAW,IAAX,CAAiB,CAAC,MAAlB,CAAyB,QAAA,CAAC,CAAD,CAAA;WAAO,CAAA,KAAO;EAAd,CAAzB;AAHiB;;AAKnB,MAAA,GAAS,gBAAA,CAAiB,eAAjB;;AAET,EAAA,GAAK,IAAI,QAAJ;;AAAc;EAAA,KAAA,wCAAA;;AACjB;mBACE,MAAM,CAAC,QAAP,CAAgB,IAAhB,EAAsB,YAAtB,GADF;KAAA,aAAA;MAEM;mBACJ,OAAO,CAAC,KAAR,CAAc,CAAA,YAAA,CAAA,CAAe,GAAf,CAAmB,CAAnB,CAAd,GAHF;;EADiB,CAAA;;IAAd;;AAOL,IAAA,GAAO,MAAM,CAAC,QAAP,CACL,oCADK,EAEL,MAFK;;AAKP,OAAO,CAAC,GAAR,CAAY,iCAAZ;;AACA;AAAA,KAAA,WAAA;EACE,IAA2B,IAA3B;IAAA,OAAO,CAAC,GAAR,CAAY,CAAA,EAAA,CAAA,CAAK,IAAL,CAAA,CAAZ,EAAA;;AADF",
  "sourcesContent": [
    "{ Database } = require './interpreter'\nrequire './LittlePrologGrammar'\nProlog = LittleProlog\n\n\neinsteinsPuzzle = \"\"\"\n  exists(A, list(A, _, _, _, _)).\n  exists(A, list(_, A, _, _, _)).\n  exists(A, list(_, _, A, _, _)).\n  exists(A, list(_, _, _, A, _)).\n  exists(A, list(_, _, _, _, A)).\n\n  rightOf(R, L, list(L, R, _, _, _)).\n  rightOf(R, L, list(_, L, R, _, _)).\n  rightOf(R, L, list(_, _, L, R, _)).\n  rightOf(R, L, list(_, _, _, L, R)).\n\n  middle(A, list(_, _, A, _, _)).\n\n  first(A, list(A, _, _, _, _)).\n\n  nextTo(A, B, list(B, A, _, _, _)).\n  nextTo(A, B, list(_, B, A, _, _)).\n  nextTo(A, B, list(_, _, B, A, _)).\n  nextTo(A, B, list(_, _, _, B, A)).\n  nextTo(A, B, list(A, B, _, _, _)).\n  nextTo(A, B, list(_, A, B, _, _)).\n  nextTo(A, B, list(_, _, A, B, _)).\n  nextTo(A, B, list(_, _, _, A, B)).\n\n  puzzle(Houses) :-\n    exists(house(red, english, _, _, _), Houses),\n    exists(house(_, spaniard, _, _, dog), Houses),\n    exists(house(green, _, coffee, _, _), Houses),\n    exists(house(_, ukrainian, tea, _, _), Houses),\n    rightOf(house(green, _, _, _, _), house(ivory, _, _, _, _), Houses),\n    exists(house(_, _, _, oldgold, snails), Houses),\n    exists(house(yellow, _, _, kools, _), Houses),\n    middle(house(_, _, milk, _, _), Houses),\n    first(house(_, norwegian, _, _, _), Houses),\n    nextTo(house(_, _, _, chesterfield, _), house(_, _, _, _, fox), Houses),\n    nextTo(house(_, _, _, kools, _),house(_, _, _, _, horse), Houses),\n    exists(house(_, _, orangejuice, luckystike, _), Houses),\n    exists(house(_, japanese, _, parliament, _), Houses),\n    nextTo(house(_, norwegian, _, _, _), house(blue, _, _, _, _), Houses),\n    exists(house(_, _, water, _, _), Houses),\n    exists(house(_, _, _, _, zebra), Houses).\n\n  solution(WaterDrinker, ZebraOwner) :-\n    puzzle(Houses),\n    exists(house(_, WaterDrinker, water, _, _), Houses),\n    exists(house(_, ZebraOwner, _, _, zebra), Houses).\n\"\"\"\n\nremoveWhitespace = ( doc ) ->\n  doc = doc.replace /(\\t|\\n|[ ])*/g, ''\n  doc = doc.replace /\\./g          , '.ยง'\n  doc.split( /ยง/g ).filter (e) -> e isnt ''\n\npuzzle = removeWhitespace einsteinsPuzzle\n\ndb = new Database( for line in puzzle\n  try\n    Prolog.matchAll line, 'expression'\n  catch err\n    console.error \"error was: '#{err}'\"\n)\n\ngoal = Prolog.matchAll(\n  'solution(WaterDrinker,ZebraOwner).'\n  'term'\n)\n\nconsole.log \"====== solution(s) ============\"\nfor item from db.query goal\n  console.log \"\\n#{item}\" if item\n"
  ]
}