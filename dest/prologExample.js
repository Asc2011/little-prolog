// Generated by CoffeeScript 2.4.1
var Database, Prolog, db, einsteinsPuzzle, err, goal, item, line, puzzle, ref, removeWhitespace;

({Database} = require('./interpreter'));

require('./LittlePrologGrammar');

Prolog = LittleProlog;

einsteinsPuzzle = "exists(A, list(A, _, _, _, _)).\nexists(A, list(_, A, _, _, _)).\nexists(A, list(_, _, A, _, _)).\nexists(A, list(_, _, _, A, _)).\nexists(A, list(_, _, _, _, A)).\n\nrightOf(R, L, list(L, R, _, _, _)).\nrightOf(R, L, list(_, L, R, _, _)).\nrightOf(R, L, list(_, _, L, R, _)).\nrightOf(R, L, list(_, _, _, L, R)).\n\nmiddle(A, list(_, _, A, _, _)).\n\nfirst(A, list(A, _, _, _, _)).\n\nnextTo(A, B, list(B, A, _, _, _)).\nnextTo(A, B, list(_, B, A, _, _)).\nnextTo(A, B, list(_, _, B, A, _)).\nnextTo(A, B, list(_, _, _, B, A)).\nnextTo(A, B, list(A, B, _, _, _)).\nnextTo(A, B, list(_, A, B, _, _)).\nnextTo(A, B, list(_, _, A, B, _)).\nnextTo(A, B, list(_, _, _, A, B)).\n\npuzzle(Houses) :-\n  exists(house(red, english, _, _, _), Houses),\n  exists(house(_, spaniard, _, _, dog), Houses),\n  exists(house(green, _, coffee, _, _), Houses),\n  exists(house(_, ukrainian, tea, _, _), Houses),\n  rightOf(house(green, _, _, _, _), house(ivory, _, _, _, _), Houses),\n  exists(house(_, _, _, oldgold, snails), Houses),\n  exists(house(yellow, _, _, kools, _), Houses),\n  middle(house(_, _, milk, _, _), Houses),\n  first(house(_, norwegian, _, _, _), Houses),\n  nextTo(house(_, _, _, chesterfield, _), house(_, _, _, _, fox), Houses),\n  nextTo(house(_, _, _, kools, _),house(_, _, _, _, horse), Houses),\n  exists(house(_, _, orangejuice, luckystike, _), Houses),\n  exists(house(_, japanese, _, parliament, _), Houses),\n  nextTo(house(_, norwegian, _, _, _), house(blue, _, _, _, _), Houses),\n  exists(house(_, _, water, _, _), Houses),\n  exists(house(_, _, _, _, zebra), Houses).\n\nsolution(WaterDrinker, ZebraOwner) :-\n  puzzle(Houses),\n  exists(house(_, WaterDrinker, water, _, _), Houses),\n  exists(house(_, ZebraOwner, _, _, zebra), Houses).";

removeWhitespace = function(doc) {
  doc = doc.replace(/(\t|\n|[ ])*/g, '');
  doc = doc.replace(/\./g, '.ยง');
  return doc.split(/ยง/g).filter(function(e) {
    return e !== '';
  });
};

puzzle = removeWhitespace(einsteinsPuzzle);

db = new Database((function() {
  var i, len, results;
  results = [];
  for (i = 0, len = puzzle.length; i < len; i++) {
    line = puzzle[i];
    try {
      results.push(Prolog.matchAll(line, 'expression'));
    } catch (error) {
      err = error;
      results.push(console.error(`error was: '${err}'`));
    }
  }
  return results;
})());

goal = Prolog.matchAll('solution(WaterDrinker,ZebraOwner).', 'term');

console.log("====== solution(s) ============");

ref = db.query(goal);
for (item of ref) {
  if (item) {
    console.log(`\n${item}`);
  }
}

//# sourceMappingURL=prologExample.js.map
