{
  "version": 3,
  "file": "interpreter.js",
  "sourceRoot": "..",
  "sources": [
    "src/interpreter.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\nsource: https://curiosity-driven.org/prolog-interpreter\n###\n\nmergeBindings = ( bindings1, bindings2 ) ->\n  return if ( not bindings1 ) or ( not bindings2 )\n\n  conflict = no\n  bindings = new Map()\n  \n  bindings1.forEach (value, variable) ->\n    bindings.set variable, value\n\n  bindings2.forEach (value, variable) ->\n    other = bindings.get variable\n    if other\n      sub = other.match value\n      unless sub\n        conflict = yes\n      else\n        sub.forEach (value, variable) ->\n          bindings.set variable, value\n    else\n      bindings.set variable, value\n\n  return if conflict\n  bindings\n\nzip = ( arrays ) ->\n  arrays[0].map ( el, idx ) ->\n    arrays.map ( arr ) ->\n      arr[ idx ]\n\n\n\nclass Variable\n  constructor : ( @name ) ->\n  toString    : -> \"Var(#{@name})\"\n  \n  match       : ( other, bindings=new Map() ) ->\n    bindings.set( @, other ) if @ isnt other\n    bindings\n    \n  substitute  : ( bindings ) ->\n    return @ unless bindings.has @\n    #\n    # if value is a compound term then substitute\n    # variables inside it too\n    #\n    bindings.get @\n      .substitute bindings\n\n\n\nclass Term\n  constructor : ( @functor, @args=[] ) ->\n  toString    : ->\n    return @functor if @args.length == 0\n    @functor + \" ( #{@args.join ', '} )\\n\"\n  \n  query       : ( db ) -> yield from db.query @\n  \n  match       : ( other ) ->\n    return other.match( @ ) unless other instanceof Term\n\n    return if ( @functor isnt other.functor ) or ( @args.length isnt other.args.length )\n\n    zip( [ @args, other.args] ).map( (args) ->\n      args[0].match args[1]\n    ).reduce mergeBindings, new Map()\n\n\n  substitute  : ( bindings ) ->\n    new Term @functor, @args.map ( arg ) ->\n      arg.substitute bindings\n\nTerm.TRUE = new Term 'true'\nTerm.TRUE.substitute = -> @\nTerm.TRUE.query      = -> yield @\n\n\nclass Conjunction extends Term\n  constructor : ( @args ) -> super()\n  toString    : -> @args.join ', '\n  \n  query       : ( db ) ->\n    \n    self = @\n    solutions = ( index, bindings ) ->\n      arg = self.args[ index ]\n      unless arg\n        yield self.substitute( bindings )\n      else\n        for item from db.query arg.substitute( bindings )\n          unified = mergeBindings arg.match( item ), bindings\n          if unified\n            yield from solutions index + 1, unified\n            \n    yield from solutions 0, new Map()\n\n    \n  substitute  : ( bindings ) ->\n    new Conjunction @args.map ( arg ) ->\n      arg.substitute bindings\n\n\n\nclass Rule\n  constructor : ( @head, @body ) ->\n  toString    : -> \"#{@head} :- #{@body}\"\n\n\n\nclass Database\n  constructor : ( @rules ) ->\n  toString    : -> @rules.join('.\\n') + '.'\n  size        : -> @rules.length\n  \n  query       : ( goal ) ->\n    \n    for rule in @rules\n      \n      match = rule.head.match goal\n      continue unless match\n\n      head = rule.head.substitute match\n      body = rule.body.substitute match\n      \n      for item from body.query @\n        yield head.substitute body.match( item )\n\n\n\nmodule.exports =\n  Term        : Term\n  Rule        : Rule\n  Variable    : Variable\n  Conjunction : Conjunction\n  Database    : Database\n"
  ]
}